//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.42
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UAVP.UAVPSet.Resources {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class hilfe {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal hilfe() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("UAVP.UAVPSet.Resources.hilfe", typeof(hilfe).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Werte -99 bis 99 (meist -20 bis +20)
        ///Dient der Einstellung der Reaktionsfähigkeit. Meist wird der Differentialwert mit entgegen gesetztem Vorzeichen zum Proportionalwert eingesetzt.
        ///Der Wert ist zu hoch, wenn das Ufo aufschaukelt oder instabil in der Luft liegt. ähnelt.
        /// </summary>
        internal static string Differenzial {
            get {
                return ResourceManager.GetString("Differenzial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  noch nicht unterstützt !!! ähnelt.
        /// </summary>
        internal static string EbenenAusgleich {
            get {
                return ResourceManager.GetString("EbenenAusgleich", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Meist Positiv
        ///Gibt an welche Empfängerimpulse ausgewertet werden (positiv/negativ). ähnelt.
        /// </summary>
        internal static string EmpfaengerImpulse {
            get {
                return ResourceManager.GetString("EmpfaengerImpulse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Graupner-Modus (K1=Gas, K2=Roll, K3=Nick, K4=Gier)
        ///Futaba/Robbe-Modus (K1=Roll, K2=Nick, K3=Gas, K4=Gier) ähnelt.
        /// </summary>
        internal static string GasKanal {
            get {
                return ResourceManager.GetString("GasKanal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Roll- und Nick-Steuerknüppelsignale werden in der Wirkung halbiert (Specky-bit)
        ///Dies ist vor allem für Proportionalwerte &gt; 20 und Anfänger hilfreich! ähnelt.
        /// </summary>
        internal static string HalbRollNick {
            get {
                return ResourceManager.GetString("HalbRollNick", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Updaterate der Regler
        ///Min  Wert +3
        ///Motoren müssen sauber Anlaufen!! ähnelt.
        /// </summary>
        internal static string Impuls {
            get {
                return ResourceManager.GetString("Impuls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Werte -99 bis 99 (gleiches Vorzeichen wie Proportional) 
        ///Der Steueranteil der die Summe der Gyrowerte über die Zeit definiert. Ist vor allem für das
        ///„Heading Lock“ des Gierkanals wichtig. Ein zu hoher Wert lässt das Ufo aufschaukeln, ein zu
        ///geringer lässt das Ufo nach einem Drehimpuls nicht mehr ganz in die Ausgangslage
        ///zurückkehren. ähnelt.
        /// </summary>
        internal static string Integral {
            get {
                return ResourceManager.GetString("Integral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Integral Limiter 
        ///Immer positiv! 
        ///Maximal 128/Integral=Integral Limiter
        ///(Beispiel Integral= 6  --&gt;  128/6=21.3 abgerundet=21, Integral Limiter darf Max 21 sein!) ähnelt.
        /// </summary>
        internal static string IntegralLimiter {
            get {
                return ResourceManager.GetString("IntegralLimiter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die LEDs zeigen Integriererzustand (hat nur Anzeigende Funktion, keinen Einfluss auf die Parameter) ähnelt.
        /// </summary>
        internal static string Integrierzustand {
            get {
                return ResourceManager.GetString("Integrierzustand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Gibt an wie stark die Nick/Rollbewegungen an der Kamera ausgeglichen werden (Tilt). ähnelt.
        /// </summary>
        internal static string Kameraausgleich {
            get {
                return ResourceManager.GetString("Kameraausgleich", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Definiert wie stark die Abweichung von der Sollrichtung
        ///in die Regelung eingreift. Zwischen 4 und 8 hat sich als ideal herausgestellt.
        ///Werte sind von -16 bis +16, default ist 0 ähnelt.
        /// </summary>
        internal static string Kompass {
            get {
                return ResourceManager.GetString("Kompass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Motoren müssen so langsam wie möglich einige Sekunden nachlaufen, bei Gas auf Null!! ähnelt.
        /// </summary>
        internal static string Leerlaufgas {
            get {
                return ResourceManager.GetString("Leerlaufgas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Limiter (immer positiv!)
        ///Meist 0 bis 40 ähnelt.
        /// </summary>
        internal static string Limiter {
            get {
                return ResourceManager.GetString("Limiter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Neutralwert des Linearsensors für diese Achse, bei exakt Waagerechter Lage des UAVP.
        ///Wert wird beim anstecken des Akkus im Linearsensor ermittelt und muss über die Funktion Neutral übertragen werden! ähnelt.
        /// </summary>
        internal static string Neutral {
            get {
                return ResourceManager.GetString("Neutral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Werte -99 bis 99 
        ///Der Steueranteil, der direkt vom Sender und den Gyros gemessen bzw. durchgereicht wird.
        ///Der Wert ist zu gering, wenn das Ufo schlecht auf Roll/Nick-Steuerbefehle reagiert. Der Wert ist zu hoch, wenn das Ufo aufschaukelt. ähnelt.
        /// </summary>
        internal static string Proportional {
            get {
                return ResourceManager.GetString("Proportional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Gibt an bei welcher Spannung der Piezo-Summer/Rote LED anspricht.
        ///Vermeidet schädliche Tiefentladung der Akkus und Abstürze durch fehlende Schubleistung.
        ///Werte bei 3s 43 bis 45 ähnelt.
        /// </summary>
        internal static string Unterspannung {
            get {
                return ResourceManager.GetString("Unterspannung", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Gibt die Art des Fliegens an.
        ///+ = ein Ausleger nach vorn in Flugrichtung
        ///X = 2 Ausleger in Flugrichtung(45° versetzt zum + Modus)
        ///Achtung: X Modus erfordert andere Parameter Prop/ Diff/ Integral ähnelt.
        /// </summary>
        internal static string XModus {
            get {
                return ResourceManager.GetString("XModus", resourceCulture);
            }
        }
    }
}
