//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UAVP.UAVPSet.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class hilfe {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal hilfe() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("UAVP.UAVPSet.Resources.hilfe", typeof(hilfe).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value -99 bis 99 (mostly -20 to +20)
        ///Serves the attitude of the reactivity. Usually the differential value becomes negative set sign to proportional value
        ///The value is too high, when the UFO is bouncing up or lies unstably in the air..
        /// </summary>
        internal static string Differenzial {
            get {
                return ResourceManager.GetString("Differenzial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not supported yet!!!.
        /// </summary>
        internal static string EbenenAusgleich {
            get {
                return ResourceManager.GetString("EbenenAusgleich", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mostly positive
        ///Indicates which receiver impulses being evaluated (positive/negatively)..
        /// </summary>
        internal static string EmpfaengerImpulse {
            get {
                return ResourceManager.GetString("EmpfaengerImpulse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Graupner-modus (K1=Gas, K2=Roll, K3=Nick, K4=Gier)
        ///Futaba/Robbe-modus (K1=Roll, K2=Nick, K3=Gas, K4=Gier).
        /// </summary>
        internal static string GasKanal {
            get {
                return ResourceManager.GetString("GasKanal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Roll- und Nick-Steuerknüppelsignale werden in der Wirkung halbiert (Specky-bit)
        ///This is particularly  for proportional values &gt; 20 and helpful for beginners!.
        /// </summary>
        internal static string HalbRollNick {
            get {
                return ResourceManager.GetString("HalbRollNick", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updaterate of controllers
        ///Min  value +3
        ///Engines have to start faultless!.
        /// </summary>
        internal static string Impuls {
            get {
                return ResourceManager.GetString("Impuls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to values -99 bis 99 (same Vorzeichen like proportional)
        ///The control portion definiting the total gyro value over time. Important for the Heading Lock of the yaw channel. A too high value permits the UFO bouncing up, a too small value doesn´t turn back  the UFO exactly after an angular momentum to its initial position..
        /// </summary>
        internal static string Integral {
            get {
                return ResourceManager.GetString("Integral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Integral Limiter 
        ///Always positiv! 
        ///Maximum 128/Integral=Integral Limiter
        ///(Example Integral= 6  --&gt;  128/6=21.3 rounded offt=21, Integral Limiter may be Max 21!).
        /// </summary>
        internal static string IntegralLimiter {
            get {
                return ResourceManager.GetString("IntegralLimiter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LEDs showing condition of integral (only indicating function, no influence on the parameters).
        /// </summary>
        internal static string Integrierzustand {
            get {
                return ResourceManager.GetString("Integrierzustand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates how strong the pitch/rolling motions at the camera will become balanced (Tilt)..
        /// </summary>
        internal static string Kameraausgleich {
            get {
                return ResourceManager.GetString("Kameraausgleich", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defines how heavy the deviation of target direction  intervenes
        ///in the regulation. Values about -99 to +99, default is 0.
        /// </summary>
        internal static string Kompass {
            get {
                return ResourceManager.GetString("Kompass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Engines have to run after as slowly as possible for some seconds, when gas is at zero!.
        /// </summary>
        internal static string Leerlaufgas {
            get {
                return ResourceManager.GetString("Leerlaufgas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Limiter (always positive !)
        ///Mostly 0 to 40.
        /// </summary>
        internal static string Limiter {
            get {
                return ResourceManager.GetString("Limiter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Neutral value of the linear sensor for this axle when exact Neutral value of the linear sensor for this axle, with accurately horizontal situation of the UAVP.
        ///Value investigated in linearsensor, when accu sticked - must be transferred over the function!.
        /// </summary>
        internal static string Neutral {
            get {
                return ResourceManager.GetString("Neutral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value -99 to 99 
        ///The controls interest,which is measured and/or through handed directy by transmitter and gyros.
        ///The value is too small, when the UFO reacts badly to roll/nodding to your instructions. The value is too high, if the UFO is bouncing up..
        /// </summary>
        internal static string Proportional {
            get {
                return ResourceManager.GetString("Proportional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows on with which tension  the piezo summer/red LED responds.
        ///Avoids over-discharging of the accus and crashes  by missing thrust performance.
        ///Values by 3s from 43 to 45.
        /// </summary>
        internal static string Unterspannung {
            get {
                return ResourceManager.GetString("Unterspannung", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows teh way to fly.
        ///+ = an arm forward into flight direction
        ///X = 2 arms in iflight driection (45° staggerd to  + modus)
        ///Note: X mode requires other parameters to prop. Diff.  integral.
        /// </summary>
        internal static string XModus {
            get {
                return ResourceManager.GetString("XModus", resourceCulture);
            }
        }
    }
}
